@page "/filesmembers"

@using GazoFicationAndWaterWeb.Data
@using MongoDB.Driver

@inject IWebHostEnvironment Environment
@inject MemberService custSer

<div class="row mt-2">
    <div class="col-md-6"><label class="labels">Название проекта</label><input type="text" class="form-control" readonly="readonly" @bind-value="projects1.Name"></div>
    <div class="col-md-6"><label class="labels">Отрасль</label><input type="text" class="form-control" readonly="readonly" @bind-value="projects1.Theme"></div>
</div>

<div class="row mt-2">
    <InputFile OnChange="AddFiles" multiple></InputFile>
</div>


<table class="table">
  <thead class="thead-light">
    <tr>
      <th scope="col">Name File</th>
      <th scope="col">Send</th>
      <th scope="col">Update</th>
    </tr>
  </thead>
  <tbody>
    @foreach (var item in browserFile)
    {
        <tr>
          <th scope="row">@item.Name</th>
            <td>
                <div class="form-check">
                  <button class="btn btn-primary" @onclick="() => Sumbt(item)">Отправить</button>
                </div>
          </td>
            <td>
                <div class="form-check">
                  <button class="btn btn-primary" @onclick="() => browserFile.Remove(item)">Изменить</button>
                </div>
          </td>
        </tr>
    }
  </tbody>
</table>

@if (members.GetType().Name == "Developer" && projects1.Theme == "Gasification")
{
<div class="col-md-6">
    <label class="text-center"><h2 >Нужные документы </h2></label>
   <div class="row mt-2" >Акт обследования и выбор трассы сети водоснабжения.</div>
    <div class="row mt-2" >Акт обследования и выбор места под проектируемую скважину</div>
       <div class="row mt-2" >Градостроительный план земельного участка.</div>
          <div class="row mt-2" >Документ подтверждающий проведение межевания с присвоением кадастрового номера земельного участка под строительством водопровода и сооружений на нем.</div>
             <div class="row mt-2">Заключение Органа Роспотребнадзора санитарно-эпидемиологической службы по отводу земельного участка и результат радиационного обследования.</div>
                <div class="row mt-2" >План населенного пункта (топографическая съемка).</div>
                   <div class="row mt-2" >Сведения о наличие водозаборных скважин (родников) на территории хозяйства.</div>
                      <div class="row mt-2">Согласованный ситуационный план с нанесением источников воды (скважин, родников и т.п), существующих водонапорных башен, предпологаемой трассой водопровода и места врезки в существующую сеть.</div>
                         <div class="row mt-2" >Справка согласования с собственниками земельных участков.</div>
                            <div class="row mt-2" >Технические условия на водоснабжение.</div>
                               <div class="row mt-2" >Технические условия на электроснабжение.</div>
</div>
}
@if (members.GetType().Name == "Developer" && projects1.Theme == "Water Suply")
{
    <div class="col-md-6 form-control" >
    <label><h2 class="text-center">Нужные документы </h2></label>
   <div class="col-md-6">АКТ обследования объекта.</div>
      <div class="col-md-6">Задание на проектирование</div>
         <div class="col-md-6">Письмо-обращение на имя Президента, Премьер-Министра, Минстрйо РТ.</div>
            <div class="col-md-6">Ситуационный план (утвержденный исполкомом).</div>
               <div class="col-md-6">Согласование посадки котельной.</div>
                  <div class="col-md-6">Технические условия на присоединение к газораспределительной сети.</div>
                     <div class="col-md-6">Технические условия на сети электроснабжение, водоснабжения, водоотведения при установке БМК.</div>
                        <div class="col-md-6">Технический паспорт (план БТИ) объекта СКБ.</div>
                           <div class="col-md-6">Технический паспорт (план БТИ) существующей котельной.</div>
    </div>
}

@if (members.GetType().Name == "Designer" && projects1.Theme == "Gasification")
{
    <div class="col-md-6">
    <label><h2 class="text-center">Нужные документы </h2></label>
   <div class="col-md-6">Диаметр (мм) трубопровода и протяженность линейного объекта (м).</div>
      <div class="col-md-6">Сметная стоимость работ, тыс.руб.</div>
         <div class="col-md-6">Срок разработки проектной документации, месяцев.</div>
    </div>
}
@if (members.GetType().Name == "Designer" && projects1.Theme == "Water Suply")
{
    <div class="col-md-6">
    <label><h2 class="text-center">Нужные документы </h2></label>
   <div class="col-md-6">Диаметр (мм) трубопровода и протяженность линейного объекта (м).</div>
      <div class="col-md-6">кол-во (шт) и производительности КНС (м3 ч).</div>
         <div class="col-md-6">Производительность БОС, м3 сут</div>
                  <div class="col-md-6">Сметная стоимость работ, тыс.руб</div>
                           <div class="col-md-6">Срок разработки проектной документации, месяцев</div>
    </div>
}


@code {
    // Переменные

    private List<IBrowserFile>? browserFile = new List<IBrowserFile>();

    private Members? members;

    private Projects projects1 = new Projects();

    private string? NameProject;

    private string? Department;

    private Documents document;

    private string path = string.Empty;

    private bool cek = false;

    // Методы 

    protected override async Task OnInitializedAsync()
    {
        members = custSer.Get();

        var client = new MongoClient();
        var database = client.GetDatabase("Davletka");
        var collection = database.GetCollection<Projects>("Projects");
        var list = collection.Find(x => true).ToList();

        var client1 = new MongoClient();
        var database1 = client1.GetDatabase("Davletka");
        var collection1 = database1.GetCollection<Projects>("Projects");
        var list1 = collection1.Find(x => true).ToList();

        foreach(var item in list)
        {
            if (members.Login == item.developer.Login)
            {
                projects1 = new Projects()
                {
                    CustomerName = item.CustomerName,
                    Name = item.Name,
                    Theme = item.Theme
                };
            }
            else if  (members.Login == item.designer.Login)
            {
                projects1 = new Projects()
                {
                    CustomerName = item.CustomerName,
                    Name = item.Name,
                    Theme = item.Theme
                };
            }
        }
    }

    private void AddFiles(InputFileChangeEventArgs e)
    {
        if (members.GetType().Name == "Developer")
        {
            foreach (var items in e.GetMultipleFiles(e.FileCount))
            {
                if (projects1.Theme == "Gasification" )
                {
                    browserFile.Add(items);
                    path = Path.Combine(Environment.ContentRootPath, "wwwroot", "filesDeveloper", items.Name);

                    using FileStream fs = new(path, FileMode.Create);
                    items.OpenReadStream(10000000000000).CopyToAsync(fs);
                }
                else if (projects1.Theme == "Water Suply")
                {
                    browserFile.Add(items);
                    path = Path.Combine(Environment.ContentRootPath, "wwwroot", "filesDeveloper", items.Name);

                    using FileStream fs = new(path, FileMode.Create);
                    items.OpenReadStream(10000000000000).CopyToAsync(fs);
                }
            }
        }

        else if (members.GetType().Name == "Designer")
        {
            foreach (var items in e.GetMultipleFiles(e.FileCount))
            {
                if (projects1.Theme == "Water Suply")
                {
                    browserFile.Add(items);
                    path = Path.Combine(Environment.ContentRootPath, "wwwroot", "filesDesigner", items.Name);

                    using FileStream fs = new(path, FileMode.Create);
                    items.OpenReadStream(10000000000000).CopyToAsync(fs);
                }
                else if (projects1.Theme == "Gasification")
                {
                    browserFile.Add(items);
                    path = Path.Combine(Environment.ContentRootPath, "wwwroot", "filesDesigner", items.Name);

                    using FileStream fs = new(path, FileMode.Create);
                    items.OpenReadStream(10000000000000).CopyToAsync(fs);
                }

            }
        }
    }

    private void Sumbt(IBrowserFile br)
    {
        if (members.GetType().Name == "Developer")
        {
            document = new Documents()
                {
                    Customer = projects1.CustomerName,
                    Login = members.Login,
                    FileName = br.Name,
                    isTrue = cek
            };
            MongoDataBase.UpdateDoc(document, document.FileName);
            MongoDataBase.AddDbDocuments(document);
            MongoDataBase.UploadToDb(br, path);
        }

        else if (members.GetType().Name == "Designer")
        {
            document = new Documents()
            {
                Customer = projects1.CustomerName,
                Login = members.Login,
                FileName = br.Name,
                isTrue = cek
            };
            MongoDataBase.UpdateDoc(document, document.FileName);
            MongoDataBase.AddDbDocuments(document);
            MongoDataBase.UploadToDb(br, path);
        }
    }
}
